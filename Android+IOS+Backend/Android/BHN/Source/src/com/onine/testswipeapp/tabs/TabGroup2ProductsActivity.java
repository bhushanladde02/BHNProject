package com.onine.testswipeapp.tabs;
//************************************************************************//
//                                                                        //
// Name        =  TabGroup2ProductsActivity                                                  //
//                                                                        //
// Description =                                                          // 
//                                                                        //
// Copyright   = 1232-AUT \u00a9 Copyright ONINE 2014,2015                //
//               Licensed Material - Program Property of ONINE            //
//               Refer to Copyright Instructions Form Number G231-2083    //
//                                                                        //
//               ONINE Confidential (ONINE Confidential-Restricted when   //
//               combined with the aggregated OCO source modules for      //
//               this program)                                            //
//                                                                        //
//               OCO Source Material                                      //
//                                                                        //
// Status      = Version 01 Release 01 Modification Level 01              //
//                                                                        //
// Compiler    = Java Standard Edition (build 1.7)                        //                    
//                                                                        //
// Change Activity:                                                       //
//                                                                        //
// Feature/Defect     Date                Description                     //
// --------------  ----------  ------------------------------------------ //
// R12493   - YP  2014/09/26    Part Created                              //
//************************************************************************//

import java.io.BufferedReader;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.util.HashMap;import java.util.List;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.util.EntityUtils;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.widget.BaseExpandableListAdapter;import android.widget.Button;import android.widget.ExpandableListView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import android.os.StrictMode;import com.onine.testswipeapp.R;import com.onine.testswipeapp.tabs.products.utility.ParseProductJson;import com.onine.testswipeapp.tabs.products.utility.Product;public class TabGroup2ProductsActivity extends Activity implements Runnable{		ProgressBar pb;    Dialog dialogDownload;    int downloadedSize = 0;    int totalSize = 0;    TextView cur_val;	private Handler handler = new Handler();		public Bitmap downloadedBitmap;		private Button btn_download;		private ImageView img_downloaded;		private ProgressDialog dialog;		private String[] filepath;	public int coloriterator = 0;		int statusClass=2;		public static String labelURL="";	public static String sdsURL="";	    static  String arrGroupelements[] = { "India", "Australia", "England","South Africa"};public static final int[] headingColors={0xff0e7dc1, 0xfffcb831, 0xff533a29, 0xff009e4a, 0xff4c4e4d};public static final int[] subElementsColors={0xffc3dff0, 0xfffeedcb, 0xffd0c8c3, 0xffc0e7d2, 0xffd1d2d3};    static Product arrChildelements[][] = {            { new Product("Sachin Tendulkar"), new Product("Raina"), new Product("Dhoni"), new Product("Yuvi") },            { new Product("Ponting"), new Product("Adam Gilchrist"), new Product("Michael Clarke") },            { new Product("Andrew Strauss"), new Product("kevin Peterson"), new Product("Nasser Hussain") },            { new Product("Graeme Smith"), new Product("AB de villiers"), new Product("Jacques Kallis") }};           ExpandableListView expList;            private String readProductsJSON(String FILENAME) {                String ret = "";                 try {            InputStream inputStream = openFileInput(FILENAME);                         if ( inputStream != null ) {                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);                String receiveString = "";                StringBuilder stringBuilder = new StringBuilder();                                 while ( (receiveString = bufferedReader.readLine()) != null ) {                    stringBuilder.append(receiveString);                }                                 inputStream.close();                ret = stringBuilder.toString();            }        }catch (FileNotFoundException e) {        } catch (IOException e) {        }         return ret;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_expandable_list_view_activity);                if (android.os.Build.VERSION.SDK_INT > 9) {            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();            StrictMode.setThreadPolicy(policy);        }                                TabSample myTabs = (TabSample) this.getParent();        myTabs.setTitle("Products");                                                String json=readProductsJSON("productsJson.json");        if(json.equalsIgnoreCase("")){        	new HttpAsyncTask().execute("http://104.130.240.26:8080/bhn/service/products/");                	do{        		try {        			Thread.sleep(2000);        		} catch (InterruptedException e) {        			e.printStackTrace();        		}        	}while(statusClass==2);                }else{        	ParseProductJson parseJson=new ParseProductJson();        	HashMap<String, List<Product>> hashmap = parseJson.parseProductJson(json);   	     	arrGroupelements=parseJson.getHeadingArray(hashmap);   	     	arrChildelements=parseJson.get2dArray(hashmap);        	        }                                expList = (ExpandableListView) this.findViewById(R.id.expandableListView1);                       expList.setGroupIndicator(null);                                expList.setAdapter(new ExpAdapter(this,expList));    }                public int GetDipsFromPixel(float pixels) {        final float scale = getResources().getDisplayMetrics().density;        return (int) (pixels * scale + 0.5f);    }            public void showImage(View view){    	Button b=(Button)view;    	StringBuilder labelurls=new StringBuilder();    	labelurls.append("");    	labelurls.append("http://104.130.240.26:8080/bhnImages/");    	labelurls.append(b.getHint().toString());        System.out.println("----- THE URL OF THE PRODUCT IS: : ==>"+labelurls.toString());    	TabGroup2ProductsActivity.labelURL=labelurls.toString();    	    	    	    	    	dialogDownload = new Dialog(TabGroup2ProductsActivity.this);    	dialogDownload.requestWindowFeature(Window.FEATURE_NO_TITLE);    	dialogDownload.setContentView(R.layout.myprogressdialog);    	dialogDownload.setTitle("Download Progress");    	TextView text = (TextView) dialogDownload.findViewById(R.id.tv1);    	text.setText("Downloading file from ... " + labelURL);    	    	cur_val = (TextView) dialogDownload.findViewById(R.id.cur_pg_tv);    	cur_val.setText("Starting download...");    	dialogDownload.show();    	    	pb = (ProgressBar)dialogDownload.findViewById(R.id.progress_bar);    	pb.setProgress(0);    	pb.setProgressDrawable(getResources().getDrawable(R.drawable.green_progress));      	    	    	    	new HttpAsyncTask().execute(labelURL, "image");    	    	    	    				}        public void showSDS(View view){    	Button b=(Button)view;    	StringBuilder sdsurls=new StringBuilder();    	sdsurls.append("");    	sdsurls.append("http://104.130.240.26:8080/sdspdf/");    	sdsurls.append(b.getHint().toString());        System.out.println("----- THE URL OF THE PRODUCT SDS IS: : ==>"+sdsurls.toString());    	TabGroup2ProductsActivity.sdsURL=sdsurls.toString();        	    	dialogDownload = new Dialog(TabGroup2ProductsActivity.this);    	dialogDownload.requestWindowFeature(Window.FEATURE_NO_TITLE);    	dialogDownload.setContentView(R.layout.myprogressdialog);    	dialogDownload.setTitle("Download Progress");    	TextView text = (TextView) dialogDownload.findViewById(R.id.tv1);    	text.setText("Downloading file from ... " + sdsURL);    	    	cur_val = (TextView) dialogDownload.findViewById(R.id.cur_pg_tv);    	cur_val.setText("Starting download...");    	dialogDownload.show();    	    	pb = (ProgressBar)dialogDownload.findViewById(R.id.progress_bar);    	pb.setProgress(0);    	pb.setProgressDrawable(getResources().getDrawable(R.drawable.green_progress));      	    	new HttpAsyncTask().execute(sdsURL, "pdf");		}                void downloadPDF(String urlToFile){    	    	try {    		URL url = new URL(urlToFile);    		HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();    		urlConnection.setRequestMethod("GET");    		urlConnection.setDoOutput(true);    		urlConnection.connect();    		File SDCardRoot = Environment.getExternalStorageDirectory();     		File file = new File(SDCardRoot,"downloaded_file.pdf");     		FileOutputStream fileOutput = new FileOutputStream(file);    		InputStream inputStream = urlConnection.getInputStream();    		totalSize = urlConnection.getContentLength();    		runOnUiThread(new Runnable() {			    public void run() {			    	pb.setMax(totalSize);			    }			    			});    		    		byte[] buffer = new byte[1024];    		int bufferLength = 0;    		while ( (bufferLength = inputStream.read(buffer)) > 0 ) {    			fileOutput.write(buffer, 0, bufferLength);    			downloadedSize += bufferLength;    			runOnUiThread(new Runnable() {    			    public void run() {    			    	pb.setProgress(downloadedSize);    			    	float per = ((float)downloadedSize/totalSize) * 100;    			    	cur_val.setText("Downloaded " + downloadedSize + "KB / " + totalSize + "KB (" + (int)per + "%)" );    			    }    			});    		}    		fileOutput.close();    		    		runOnUiThread(new Runnable() {			    public void run() {			    	dialogDownload.dismiss();			    	downloadedSize = 0;			        totalSize = 0;			        Intent intent = new Intent();			        intent.setAction(Intent.ACTION_VIEW);			        intent.setDataAndType(Uri.parse("file://" + Environment.getExternalStorageDirectory().getPath()+"/downloaded_file.pdf"), "application/*");			        startActivity(intent);			    }			});    		    	    	} catch (final MalformedURLException e) {    		showError("Error : MalformedURLException " + e);  		    		e.printStackTrace();    	} catch (final IOException e) {    		showError("Error : IOException " + e);  		    		e.printStackTrace();    	}    	catch (final Exception e) {    		showError("Error : Please check your internet connection " + e);    		e.printStackTrace();    	}    	    }                void downloadImage(String urlToFile){    	    	try {    		URL url = new URL(urlToFile);    		HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();    		urlConnection.setRequestMethod("GET");    		urlConnection.setDoOutput(true);    		urlConnection.connect();    		File SDCardRoot = Environment.getExternalStorageDirectory();     		File file = new File(SDCardRoot,"downloaded_file.png");     		FileOutputStream fileOutput = new FileOutputStream(file);    		InputStream inputStream = urlConnection.getInputStream();    		totalSize = urlConnection.getContentLength();    		runOnUiThread(new Runnable() {			    public void run() {			    	pb.setMax(totalSize);			    }			    			});    		    		byte[] buffer = new byte[1024];    		int bufferLength = 0;    		while ( (bufferLength = inputStream.read(buffer)) > 0 ) {    			fileOutput.write(buffer, 0, bufferLength);    			downloadedSize += bufferLength;    			runOnUiThread(new Runnable() {    			    public void run() {    			    	pb.setProgress(downloadedSize);    			    	float per = ((float)downloadedSize/totalSize) * 100;    			    	cur_val.setText("Downloaded " + downloadedSize + "KB / " + totalSize + "KB (" + (int)per + "%)" );    			    }    			});    		}    		fileOutput.close();    		    		runOnUiThread(new Runnable() {			    public void run() {			    	dialogDownload.dismiss();			    	downloadedSize = 0;			        totalSize = 0;			        Intent intent = new Intent();			        intent.setAction(Intent.ACTION_VIEW);			        intent.setDataAndType(Uri.parse("file://" + Environment.getExternalStorageDirectory().getPath()+"/downloaded_file.png"), "image/*");			        startActivity(intent);			    }			});    		    	    	} catch (final MalformedURLException e) {    		showError("Error : MalformedURLException " + e);  		    		e.printStackTrace();    	} catch (final IOException e) {    		showError("Error : IOException " + e);  		    		e.printStackTrace();    	}    	catch (final Exception e) {    		showError("Error : Please check your internet connection " + e);    		e.printStackTrace();    	}    	    }        void showError(final String err){    	runOnUiThread(new Runnable() {		    public void run() {		    	Toast.makeText(TabGroup2ProductsActivity.this, err, Toast.LENGTH_LONG).show();		    }		});    }                		public void resetImage(View view){		img_downloaded.setImageResource(R.drawable.noimage);			}        	@Override	public void run() {								handler.post(new Runnable() 		{			@Override			public void run() 			{								Intent intent = new Intent();				intent.setAction(android.content.Intent.ACTION_VIEW);				intent.setData(Uri.parse(TabGroup2ProductsActivity.labelURL));				startActivity(intent);								dialog.dismiss();			}		});			}		public static String convertStreamToString(InputStream inputStream) throws IOException {		if (inputStream != null) {		StringBuilder sb = new StringBuilder();		String line;		try {		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));		while ((line = reader.readLine()) != null) {		sb.append(line).append("\n");		}				} finally {		inputStream.close();		}		return sb.toString();		} else {		return "";		} }private class HttpAsyncTask extends AsyncTask<String, Void, String> {		AlertDialog.Builder  builder;    protected void onPreExecute() {   super.onPreExecute();         builder = new AlertDialog.Builder(TabGroup2ProductsActivity.this);      }    @Override    protected String doInBackground(String... urls) {    	if(urls.length==1){    		return POST(urls[0]);    	}else{    		if("pdf".equalsIgnoreCase(urls[1])){        		downloadPDF(urls[0]);        		return "";        	}else{        		downloadImage(urls[0]);        		return "";        	}    	}    	    	    }       @Override    protected void onPostExecute(String result) {} }public String POST(String url){	System.out.println("I am in post data./..............................");		        HttpClient httpclient = new DefaultHttpClient();    HttpGet httppost = new HttpGet(url);    String result=null;    try {        HttpResponse response = httpclient.execute(httppost);             	int status = response.getStatusLine().getStatusCode();        	        	System.out.println("Status is : "+status);        	ParseProductJson parseJson=new ParseProductJson();        	if (status == 200) {        	     result = EntityUtils.toString(response.getEntity());           	     System.out.println("################result1###############################"+result);        	             	     FileOutputStream fos = openFileOutput("productsJson.json", Context.MODE_PRIVATE);        	     fos.write(result.getBytes());        	     fos.close();              	     System.out.println("Done");        	             	     HashMap<String, List<Product>> hashmap = parseJson.parseProductJson(readProductsJSON("productsJson.json"));        	     arrGroupelements=parseJson.getHeadingArray(hashmap);        	     arrChildelements=parseJson.get2dArray(hashmap);        	     statusClass=status;        	             	                  }        else{        	statusClass=400;        	result = "Did not work!";            }    } catch (ClientProtocolException e) {    	e.printStackTrace();    } catch (IOException e) {    	e.printStackTrace();    }   return result; }			} class ExpAdapter extends BaseExpandableListAdapter {    private Context myContext;    ExpandableListView _list;    public ExpAdapter(Context context,ExpandableListView list) {        myContext = context;        _list=list;    }    public Object getChild(int groupPosition, int childPosition) {        return null;    }    public long getChildId(int groupPosition, int childPosition) {        return 0;    }    public View getChildView(int groupPosition, int childPosition,            boolean isLastChild, View convertView, ViewGroup parent) {                if (convertView == null) {            System.out.println("---getChildView --convertView == null");            LayoutInflater inflater = (LayoutInflater) myContext                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = inflater.inflate(R.layout.child_row, null);        }        LinearLayout linLayout=(LinearLayout)convertView.findViewById(R.id.casePersonLinearLayout);        linLayout.setBackgroundColor(TabGroup2ProductsActivity.subElementsColors[groupPosition % 5]);                TextView tvPlayerName = (TextView) convertView                .findViewById(R.id.tvPlayerName);                tvPlayerName                .setText(TabGroup2ProductsActivity.arrChildelements[groupPosition][childPosition].getName());        Button button=(Button)convertView.findViewById(R.id.tvPlayerbutton);        Button buttonSDS=(Button)convertView.findViewById(R.id.tvPlayerbuttonSDS);        String id=(groupPosition+1)+""+(childPosition+1)+"";        String imageurlarr[];        String sdsurlarr[];        if(null!=button){        	imageurlarr=TabGroup2ProductsActivity.arrChildelements[groupPosition][childPosition].getImageurl().split("\u002F");        	String imageURLStringHint=imageurlarr[imageurlarr.length-1];        	        	sdsurlarr=TabGroup2ProductsActivity.arrChildelements[groupPosition][childPosition].getSdsurl().split("\u002F");        	String sdsURLStringHint=sdsurlarr[sdsurlarr.length-1];        	        	        	System.out.println("--- hint set : "+imageURLStringHint);        	button.setHint(imageURLStringHint);        	        	System.out.println("--- SDS hint set : "+sdsURLStringHint);        	buttonSDS.setHint(sdsURLStringHint);        }        return convertView;    }    public int getChildrenCount(int groupPosition) {        return TabGroup2ProductsActivity.arrChildelements[groupPosition].length;    }    public Object getGroup(int groupPosition) {        return null;    }    public int getGroupCount() {        return TabGroup2ProductsActivity.arrGroupelements.length;    }    public long getGroupId(int groupPosition) {        return 0;    }            @Override    public View getGroupView(int groupPosition, boolean isExpanded, View convertView,            ViewGroup parent) {        System.out.println("---getGroupView --");        String group = (String) getGroup(groupPosition);        if (convertView == null) {            LayoutInflater infalInflater = (LayoutInflater) myContext                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = infalInflater.inflate(R.layout.group_row, null);        }                      TextView tvGroupName= (TextView) convertView.findViewById(R.id.tvGroupName);        tvGroupName.setText(TabGroup2ProductsActivity.arrGroupelements[groupPosition]);                tvGroupName.setBackgroundColor(TabGroup2ProductsActivity.headingColors[groupPosition % 5]);        tvGroupName.setTextColor(0xffffffff);        _list.expandGroup(groupPosition);          		return convertView;    }    public boolean hasStableIds() {        return false;    }    public boolean isChildSelectable(int groupPosition, int childPosition) {        return true;    }    }